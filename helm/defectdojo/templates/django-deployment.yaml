{{- $fullName := include "defectdojo.fullname" . -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $fullName }}-django
  labels:
    defectdojo.org/component: django
    app.kubernetes.io/name: {{ include "defectdojo.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    helm.sh/chart: {{ include "defectdojo.chart" . }}
spec:
  replicas: {{ .Values.django.replicas }}
  selector:
    matchLabels:
      defectdojo.org/component: django
      app.kubernetes.io/name: {{ include "defectdojo.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        defectdojo.org/component: django
        app.kubernetes.io/name: {{ include "defectdojo.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      volumes:
        - name: run
          emptyDir: {}
      containers:
        - name: uwsgi
          image: {{ .Values.django.uwsgi.image | quote }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          volumeMounts:
            - name: run
              mountPath: /run
          env:
            - name: DD_DATABASE_ENGINE
              value: django.db.backends.{{ if eq .Values.database "postgresql" }}postgresql_psycopg2{{ end }}{{ if eq .Values.database "mysql" }}mysql{{ end }}
            - name: DD_ALLOWED_HOSTS
              value: {{ $fullName }}.{{ .Release.Namespace }}.minikube.local
            - name: DD_DATABASE_HOST
              value: {{ $fullName }}-{{ .Values.database }}
            - name: DD_DATABASE_PORT
              value: "{{ if eq .Values.database "postgresql" }}{{ .Values.postgresql.service.port }}{{ end }}{{ if eq .Values.database "mysql" }}3306{{ end }}"
            - name: DD_DATABASE_USER
              value: {{ if eq .Values.database "postgresql" }}{{ .Values.postgresql.postgresqlUsername }}{{ end }}{{ if eq .Values.database "mysql" }}{{ .Values.mysql.mysqlUser }}{{ end }}
            - name: DD_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $fullName }}-{{ .Values.database }}
                  key: {{ .Values.database }}-password
            - name: UWSGI_ENDPOINT
              value: /run/uwsgi.sock
          resources:
            {{- toYaml .Values.django.uwsgi.resources | nindent 12 }}
        - name: nginx
          image: {{ .Values.django.nginx.image | quote }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          volumeMounts:
            - name: run
              mountPath: /run
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
            - name: UWSGI_HOST
              value: localhost
            - name: UWSGI_PASS
              value: unix:///run/uwsgi.sock
          livenessProbe:
            httpGet:
              path: /
              port: http
              httpHeaders:
                - name: Host
                  value: {{ .Values.host }}
            initialDelaySeconds: 60
            periodSeconds: 10
            failureThreshold: 6
          readinessProbe:
            httpGet:
              path: /
              port: http
              httpHeaders:
                - name: Host
                  value: {{ .Values.host }}
            initialDelaySeconds: 100
            periodSeconds: 10
            failureThreshold: 5
          resources:
            {{- toYaml .Values.django.nginx.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.django.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.django.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
